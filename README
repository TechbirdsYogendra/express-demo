# Express Demo App

## What We Have Learned in This App:

### 1. Setting up an Express.js Application:
- Installed and configured Express.js to create a web server.
- Used middleware like `express.json()` and `express.static()`.

### 2. Creating RESTful APIs:
- Implemented `GET`, `POST`, `PUT`, and `DELETE` routes for managing courses.
- Used route parameters to handle dynamic URLs (e.g., `/api/courses/:id`).

### 3. Validating Input:
- Used the `Joi` library to validate user input.
- Ensured proper error handling for invalid data with `400 Bad Request`.

### 4. Error Handling:
- Sent consistent JSON responses for `404 Not Found` and `400 Bad Request` errors.
- Created a reusable helper function for error responses.

### 5. Serving Static Files:
- Configured the `public` directory to serve static files like `index.html` and `courses.html`.

### 6. Dynamic Content Rendering:
- Used JavaScript in `courses.html` to fetch and display data dynamically from the `/api/courses` endpoint.

### 7. Linking HTML Pages:
- Linked `index.html` with `courses.html` to navigate between the home screen and the courses list.

### 8. Managing Environment Variables:
- Used the `config` package to manage environment-specific configurations.
- Created a `custom-environment-variables.json` file to map environment variables to configuration properties.
- Example:
  ```json
  {
      "mail": {
          "password": "app_mail_password"
      }
  }

### 9. debug use cases
### 9. Debugging the Application:
- Used the `debug` package for debugging the application.
- Created two namespaces for debugging:
   - `app:startup`: For logging startup-related messages (e.g., enabling middleware like Morgan).
   - `app:db`: For logging database connection messages.
- Enabled debugging logs using the `DEBUG` environment variable:
   - To enable specific namespaces:
      ```bash
      export DEBUG=app:startup
      ```
   - To enable multiple namespaces:
   ```bash
      export DEBUG=app:startup,app:db
      ```
      - To enable all debug logs:
   ```bash
      export DEBUG=*
      ```
### 8. Best Practices:
- Followed RESTful API design principles.
- Used proper HTTP status codes for responses.
- Maintained clean and modular code for better readability and maintainability.

### 9. Running the Application:
- Used `npm` to manage dependencies.
- Started the server and tested the application on `http://localhost:3000/`.

---

## Summary:
This app demonstrates the basics of building a full-stack application with Express.js, including:
- Backend API development.
- Frontend integration with static files.
- Dynamic content rendering using JavaScript.

It serves as a foundation for learning and building more advanced Node.js and Express.js applications.
